#Time Complexity - O(n)
class getNode:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
        
def longestPath(root,s,l,ml,ms):
    if not root:
        if (ml[0] < l):
            ml[0] = l
            ms[0] = s
            
        elif(ml[0] == l and ms[0] < s):
            ms[0] = s
            
        return
    
    longestPath(root.left,s+root.data,l+1,ml,ms)
    longestPath(root.right,s+root.data,l+1,ml,ms)
def longest(root):
    if(not root):
        return 0
    ms =[-99999999]
    ml =[0]
    
    longestPath(root,0,0,ml,ms)
    return ms[0]
root = getNode(4)               
root.left = getNode(2)              
root.right = getNode(5)           
root.left.left = getNode(7)       
root.left.right = getNode(1)  
root.right.left = getNode(2)              
root.right.right = getNode(3)       
root.left.right.left = getNode(6)  
  
print(longest(root)) 
