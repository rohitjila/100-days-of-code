def find(v):
    if (parent[v] == -1):
        return v
    return (find(parent[v]))
    
def union(froM,top):
    froM=find(froM)
    top=find(top)
    parent[froM]=top
    
def isCyclic(adj):
    for it in adj:
        froM=find(it[0])
        top=find(it[1])
        
        if (froM == top):
            return True
            
        union(froM,top)
    return False
E,V=map(int(input().split()))
parent=[-1]*V
adj=[[] for i in range(V)]
for i in range(E):
    u,v=map(int,input().split())
    adj.append([u,v])
