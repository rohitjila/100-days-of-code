class Solution:
    """
    @param n: An integer
    @param edges: a list of undirected edges
    @return: true if it's a valid tree, or false
    """
    def validTree(self, n, edges):
        if not n:
            return True
        adj = [[] for i in range(n)]
        for u ,v in edges:
            adj[u].append(v)
            adj[v].append(u)

        visit =set()
        def dfs(node,prev):
            if node in visit:
                return False
            visit.add(node)
            for neigh in adj[node]:
                if (neigh == prev):
                    continue
                if (dfs(neigh,node)) == False:
                    return False
            return True

        return dfs(0,-1) and n == len(visit)
