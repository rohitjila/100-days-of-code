class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        rows,cols=len(heights),len(heights[0])
        pac,alt=set(),set()
        
        
        def dfs(r,c,visit,prev):
            if (r < 0 or c < 0 or r == rows or c == cols or heights[r][c] < prev or 
               (r,c) in visit):
                return 
            visit.add((r,c))
            dfs(r+1,c,visit,heights[r][c])
            dfs(r-1,c,visit,heights[r][c])
            dfs(r,c+1,visit,heights[r][c])
            dfs(r,c-1,visit,heights[r][c])
        
        for c in range(cols):
            dfs(0,c,pac,heights[0][c])
            dfs(rows-1,c,alt,heights[rows-1][c])
            
        for r in range(rows):
            dfs(r,cols-1,alt,heights[r][cols-1])
            dfs(r,0,pac,heights[r][0])
            
            
        res=[]
        for i in range(rows):
            for j in range(cols):
                if ((i,j) in pac and (i,j) in alt):
                    res.append([i,j])
        return res
            
