#inserting at end
#inserting at beginning
#inserting in between
#creating Node class
#Creating linked list class
#Traversing in singly linked list


class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class LinkedList:
    def __init__(self):
        self.head=None
    def insert(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
        else:
            temp=self.head
            while(temp.next):
                temp=temp.next
            temp.next=new_node
            
            
    def insert_beg(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
        else:
            new_node.next=self.head
            self.head=new_node
            
    def insert_between_after(self,data,x):
        temp=self.head
        while(temp):
            if temp.data == x:
                break
            temp=temp.next
        if temp is None:
            print("Not found")
        else:
            new_node=Node(data)
            new_node.next=temp.next
            temp.next=new_node
            
            
    def insert_between_before(self,data,x):
        if self.head is None:
            print("Linked list is empty")
            return
        if self.head.data == x:
            new_node=Node(data)
            new_node.next=self.head
            self.head=new_node
            return
        temp=self.head
        while(temp):
            if temp.next.data == x:
                break
            temp=temp.next
        if temp is None:
            print("Not found")
        else:
            new_node=Node(data)
            new_node.next=temp.next
            temp.next=new_node
        
    def traverse(self):
        temp=self.head
        while(temp):
            print(temp.data,end=" ")
            temp=temp.next
l1=LinkedList()
l1.insert(10)
l1.insert(20)
l1.insert(30)
l1.insert_between_before(20,10)
l1.insert_beg(30)
l1.insert_beg(20)
l1.insert_beg(10)
l1.traverse()
