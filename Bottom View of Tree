from collections import deque
class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
        
#recursive method if the answer is coming at same level the print the first one
def bottomViewu(root,d,l,m):
    if root is None:
        return 
    if d not in m:
        m[d]=[root.data,l]
    elif (m[d][1] < l):
        m[d]=[root.data,l]
    bottomViewu(root.left,d-1,l+1,m)
    bottomViewu(root.right,d+1,l+1,m)
def bottomView(root):
    m={}
    res=[]
    bottomViewu(root,0,0,m)
    for i in sorted(m):
        res.append(m[i][0])
    print(*res)
    
    
def bottomViewe(root):
    if root is None:
        return
    m={}
    q=deque([(root,0)])
    mi=float('inf')
    while(q):
        temp=q.popleft()
    
        m[temp[1]]=temp[0].data
        mi=min(mi,temp[1])
            
        if (temp[0].left):
            q.append((temp[0].left,temp[1]-1))
            
        if (temp[0].right):
            q.append((temp[0].right,temp[1]+1))
            
    res=[]       
    while mi in m:
        res.append(m[mi])
        mi+=1
    return res     
    
    
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left =Node(6)
root.right.right=Node(7)
bottomView(root)
print(bottomViewe(root))
