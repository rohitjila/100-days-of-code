class Solution:
1st Method
    def findMaxLen(self,S):
        n=len(S)
        res=0
        stack=[]
        stack.append(-1)
        for i in range(n):
            if (S[i] == "("):
                stack.append(i)
                
            else:
                if (len(stack) != 0):
                    stack.pop()
                    
                if(len(stack) != 0):
                    res=max(res,i- stack[len(stack)-1])
                
                else:
                    stack.append(i)
                    
        return res
        
        
 2nd Method
 class Solution:
    def longestValidParentheses(self, s: str) -> int:
        n=len(s)
        left=0
        right=0
        maxlength=0
        for i in range(n):
            if(s[i] == "("):
                left+=1
                
            else:
                right+=1
                
            if (left == right):
                maxlength=max(maxlength,left+right)
            
            if (right > left):
                left = right =0
                       
        left=right=0
        for i in range(n-1,-1,-1):
            if(s[i] == "("):
                left+=1
                
            else:
                right+=1
                
            if (left == right):
                maxlength=max(maxlength,left+right)
            
            if (left > right):
                left = right=0
                
        return maxlength
