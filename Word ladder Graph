class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordlist)-> int:
        if endWord not in wordlist:
            return 0
        nei=defaultdict(list)
        if (beginWord not in wordlist):
            wordlist.append(beginWord)
        for word in wordlist:
            for j in range(len(word)):
                pattern = word[:j] + "*" + word[j+1:]
                nei[pattern].append(word)
                
        visit=set([beginWord])
        q=deque([beginWord])
        res=1
        while(q):
            for i in range(len(q)):
                word=q.popleft()
                if (word == endWord):
                    return res
                for j in range(len(word)):
                    pattern=word[:j] + "*" + word[j+1:]
                    for neiWord in nei[pattern]:
                        if neiWord not in visit:
                            visit.add(neiWord)
                            q.append(neiWord)
            res+=1
        return 0
