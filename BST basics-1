class BST:
    def __init__(self,key):
        self.key=key
        self.lchild=None
        self.rchild=None
    
    def insert(self,data):
        if self.key is None:
            self.key=data
            return 
        if self.key == data:
            return 
        
        if self.key > data:
            if self.lchild:
                self.lchild.insert(i)
            else:
                self.lchild=BST(data)
                
        else:
            if self.rchild:
                self.rchild.insert(i)
            else:
                self.rchild=BST(data)
                
    def search(self,data):
        if self.key == data:
            print("Node is found")
            return
        if data < self.key:
            if self.lchild:
                self.lchild.search(data)
            else:
                print("Node is not found in tree")
        else:
            if self.rchild:
                self.rchild.search(data)
            else:
                print("Node is not found in tree")
            
    def preorder(self):
        print(self.key,end=" ")
        if self.lchild:
            self.lchild.preorder()
        if self.rchild:
            self.rchild.preorder()
            
    def inorder(self):
        if self.lchild:
            self.lchild.inorder()
        print(self.key,end=" ")
        if self.rchild:
            self.rchild.inorder()
            
    def postorder(self):
        if self.lchild:
            self.lchild.postorder()
        if self.rchild:
            self.rchild.postorder()
        print(self.key,end=" ")
        
        
    def delete(self,data):
        if self.key is None:
            print("We can't delete anything")
            return 
        if data < self.key:
            if self.lchild:
                self.lchild=self.lchild.delete(data)
            else:
                print("given node is not present in the string ")
        
        elif data > self.key:
            if self.rchild:
                self.rchild=self.rchild.delete(data)
            else:
                print("given node is not present in the string ")
                
        else:
            if self.lchild is None:
                temp=self.rchild
                self=None
                return temp
                
            if self.rchild is None:
                temp=self.lchild
                self=None
                return temp
                
            node=self.rchild
            while node.lchild:
                node=node.lchild
            self.key = node.key
            self.rchild=self.rchild.delete(node.key)
            
        return self
                
                
root=BST(10)
l1=[6,3,1,6,98,3,7]
for i in l1:
    root.insert(i)
root.preorder()
print()
root.delete(6)
root.preorder()
