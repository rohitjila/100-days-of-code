#Distributed weight problem
#linear search
t=int(input())
for i in range(t):
    n,m=map(int,input().split())
    arr=list(map(int,input().split()))
    k=max(arr)
    while(True):
        curr_sum=arr[0]
        sub=1
        flag=True
        for i in range(1,len(arr)):
            if (arr[i] + curr_sum)>k:
                curr_sum=arr[i]
                sub+=1
            else:
                curr_sum=curr_sum+arr[i]
            if sub > m:
                flag=False
                break
        if flag:
            print(k)
            break
        k+=1
        
#Binary search      
def possible(arr,m,k):
    curr_sum=arr[0]
    sub=1
    flag=True
    for i in range(1,len(arr)):
        if (arr[i] + curr_sum)>k:
            curr_sum=arr[i]
            sub+=1
        else:
            curr_sum=curr_sum+arr[i]
        if sub > m:
            flag=False
            break
    return (flag)
t=int(input())
for i in range(t):
    n,m=map(int,input().split())
    arr=list(map(int,input().split()))
    left=max(arr)
    right=sum(arr)
    ans=[]
    while(left <= right):
        mid=(left+right)//2
        if (possible(arr,m,mid)):
            ans.append(mid)
            right=mid-1
        else:
            left=mid+1
    print(min(ans))
