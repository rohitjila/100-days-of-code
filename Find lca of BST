#Time Complexity -O(h) -> Height of tree
#Space Complexity - O(1) -> if we ignore the recursive call stack

# Space Complexity of iterative - O(1)

class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None

def lca(root, n1, n2): 
	while root: 
		if root.data > n1 and root.data > n2: 
			root = root.left 
		elif root.data < n1 and root.data < n2: 
			root = root.right 
		else: 
			break
	return root 
	
	
def lca(root,n1,n2):
    if root is None:
        return 
    if (root.data > n1 and root.data > n2):
        lca(root.left,n1,n2)
        
    if (root.data < n1 and root.data < n2):
        lca(root.right,n1,n2)
        
    return root
root = Node(20) 
root.left = Node(8) 
root.right = Node(22) 
root.left.left = Node(4) 
root.left.right = Node(12) 
root.left.right.left = Node(10) 
root.left.right.right = Node(14) 
n1 = 10 ; n2 = 22
t = lca(root, n1, n2) 
print(t.data) 

    
