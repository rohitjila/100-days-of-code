class Node:
    def __init__(self,key):
        self.key=key
        self.left=None
        self.right=None
        
    def insert(self,data):
        if root.key is None:
            return
        if self.key == data:
            return
        if self.key > data:
            if self.left:
                self.left.insert(data)
            else:
                self.left=Node(data)
        else:
            if self.right:
                self.right.insert(data)
            else:
                self.right=Node(data)
    def search(self,data):
        if self.key == data:
            print("Node is found")
            return
        if data < self.key:
            if self.left:
                self.left.search(data)
            else:
                print("Node is not found in left tree")
        else:
            if self.right:
                self.right.search(data)
            else:
                print("Node is not found in  right tree")
                
    def delete(self,data):
        if self.key is None:
            return
        if data < self.key:
            if self.left:
                self.left=self.left.delete(data)
            else:
                print("not found")
        elif data > self.key:
            if self.right:
                self.right=self.right.delete(data)
        else:
            if self.left is None:
                temp=self.right
                self=None
                return temp
            if self.right is None:
                temp=self.left
                self=None
                return temp
                
            node=self.right
            while(node.left):
                node=self.left
            self.key = node.key
            self.right=self.right.delete(node.key)
        return self
def preorder(root):
    if root is None:
        return 
    print(root.key,end=" ")
    preorder(root.left)
    preorder(root.right)
    
root=Node(3)
l1=[3,1,6,7,98]
for i in l1:
    root.insert(i)
root.delete(3)
preorder(root)
